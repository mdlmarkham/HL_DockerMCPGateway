# Environment Variables Template
# Copy this to .env and adjust for your environment

# ============================================================================
# Tailscale Configuration
# ============================================================================

# REQUIRED: Tailscale Authentication Key
# Generate an auth key at: https://login.tailscale.com/admin/settings/keys
# Recommended: Create a reusable key with tag:mcp-server
TS_AUTHKEY=tskey-auth-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Optional: Your Tailscale tailnet domain (for MagicDNS)
# Example: tail12345.ts.net
TS_CERT_DOMAIN=your-tailnet.ts.net

# ============================================================================
# Workspace Configuration
# ============================================================================

# Path to your workspace directory
# This directory will be mounted read-only into the containers
MCP_WORKSPACE_PATH=/srv/mcp/workspace

# ============================================================================
# Atlassian MCP Server Configuration (Optional)
# ============================================================================

# To enable Atlassian MCP server, either:
# 1. Set these environment variables and remove 'profiles: [atlassian]' from compose.yaml
# 2. Or use: docker compose --profile atlassian up -d

# Confluence Settings
# Get API token from: https://id.atlassian.com/manage-profile/security/api-tokens
CONFLUENCE_URL=https://your-company.atlassian.net/wiki
CONFLUENCE_USERNAME=your.email@company.com
CONFLUENCE_API_TOKEN=

# Jira Settings
JIRA_URL=https://your-company.atlassian.net
JIRA_USERNAME=your.email@company.com
JIRA_API_TOKEN=

# Optional: Filter searches to specific spaces/projects (comma-separated)
# CONFLUENCE_SPACES_FILTER=DEV,TEAM,DOC
# JIRA_PROJECTS_FILTER=PROJ,SUPPORT,BUG

# ============================================================================
# Obsidian MCP Server Configuration (Optional)
# ============================================================================

# Requires Obsidian REST API plugin: https://github.com/coddingtonbear/obsidian-local-rest-api
# To enable: docker compose --profile obsidian up -d

# Obsidian REST API Host (use host.docker.internal for local Docker)
OBSIDIAN_HOST=host.docker.internal

# API Key from Obsidian REST API plugin settings
OBSIDIAN_API_KEY=

# ============================================================================
# Reddit MCP Server Configuration (Optional)
# ============================================================================

# Create Reddit app at: https://www.reddit.com/prefs/apps
# To enable: docker compose --profile reddit up -d

# Reddit API Credentials
REDDIT_USERNAME=yourRedditUsername
REDDIT_CLIENT_ID=
REDDIT_CLIENT_SECRET=
REDDIT_PASSWORD=

# ============================================================================
# Komodo MCP Server Configuration (Optional)
# ============================================================================

# Manage Docker containers, deployments, and stacks through Komodo
# To enable: docker compose --profile komodo up -d

# Komodo Server Connection
# Example: https://komodo.example.com:9120 or http://localhost:9120
KOMODO_URL=

# Komodo Credentials
KOMODO_USERNAME=
KOMODO_PASSWORD=

# ============================================================================
# Proxmox MCP Server Configuration (Optional)
# ============================================================================

# Manage Proxmox VE/PVE nodes, VMs, storage, and clusters
# To enable: docker compose --profile proxmox up -d

# Proxmox Server Connection
# Example: proxmox.example.com or 192.168.1.100
PROXMOX_HOST=

# Proxmox API Port (default: 8006)
PROXMOX_PORT=8006

# Proxmox API Token Authentication
# Format: username@realm (e.g., root@pam or user@pve)
PROXMOX_USER=

# API Token Name (created in Proxmox UI: Datacenter -> Permissions -> API Tokens)
PROXMOX_TOKEN_NAME=

# API Token Secret Value
PROXMOX_TOKEN_VALUE=

# SSL Certificate Verification (set to false for self-signed certs)
PROXMOX_VERIFY_SSL=false

# Proxmox Service Type (default: PVE)
PROXMOX_SERVICE=PVE

# Log Level (DEBUG, INFO, WARNING, ERROR)
PROXMOX_LOG_LEVEL=INFO

# ============================================================================
# Tailscale MCP Server Configuration (Optional)
# ============================================================================

# Manage Tailscale network, devices, ACLs, and status programmatically
# To enable: docker compose --profile tailscale-mcp up -d

# Tailscale API Key (generate at https://login.tailscale.com/admin/settings/keys)
# Note: This is DIFFERENT from the TS_AUTHKEY used by the tailscale-gateway service
# This key is for the MCP server to manage your Tailscale network via API
TAILSCALE_MCP_API_KEY=

# Tailscale Tailnet Name (your organization/tailnet identifier)
# Example: alice@gmail.com or mycompany.com
TAILSCALE_MCP_TAILNET=

# Tailscale API Base URL (default: https://api.tailscale.com)
TAILSCALE_API_BASE_URL=https://api.tailscale.com

# Log Level: 0=DEBUG, 1=INFO, 2=WARN, 3=ERROR (default: 1)
TAILSCALE_MCP_LOG_LEVEL=1

# ============================================================================
# Optional: Legacy Port Mappings (not used with Tailscale Serve)
# ============================================================================

# These are not needed when using Tailscale Serve
# The service will be accessible via HTTPS on your Tailscale network
# MCP_GATEWAY_PORT=6277
# MCP_INSPECTOR_PORT=6274
